name: Simulated CI/CD Pipeline

# Define the events that trigger the workflow
on:
  push:
    branches:
      - main  # Trigger the workflow on push events to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests targeting the 'main' branch

# Define the jobs that will be executed as part of the workflow
jobs:
  # The 'build' job
  build:
    runs-on: ubuntu-latest  # Specifies the virtual environment for the job

    steps:
      # Step to checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step to simulate a failure in the build stage
      - name: Simulate Build Failure
        run: |
          echo "Simulating build failure..."
          exit 1  # Exits with a non-zero status to simulate failure

    # Add notification step for failure
    if: failure()
    steps:
      - name: Send failure notification
        uses: actions/github-script@v6
        with:
          script: |
            const { GitHub, context } = require('@actions/github');
            const github = new GitHub(process.env.GITHUB_TOKEN);

            const { data: { login } } = await github.users.getAuthenticated();
            const failureMessage = `Build failed in repository ${context.repo.owner}/${context.repo.repo}. Triggered by ${login}.`;

            await github.issues.createComment({
              ...context.repo,
              issue_number: 1, // Replace with your issue number or use another notification method
              body: failureMessage
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # The 'test' job
  test:
    runs-on: ubuntu-latest  # Specifies the virtual environment for the job
    needs: build  # This job depends on the successful completion of the 'build' job

    steps:
      # Step to print "Hello World" to indicate the test stage
      - name: Print Hello World
        run: echo "Hello World - Test Stage"

    # Add notification step for failure
    if: failure()
    steps:
      - name: Send failure notification
        uses: actions/github-script@v6
        with:
          script: |
            const { GitHub, context } = require('@actions/github');
            const github = new GitHub(process.env.GITHUB_TOKEN);

            const { data: { login } } = await github.users.getAuthenticated();
            const failureMessage = `Test failed in repository ${context.repo.owner}/${context.repo.repo}. Triggered by ${login}.`;

            await github.issues.createComment({
              ...context.repo,
              issue_number: 1, // Replace with your issue number or use another notification method
              body: failureMessage
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # The 'deploy' job
  deploy:
    runs-on: ubuntu-latest  # Specifies the virtual environment for the job
    needs: test  # This job depends on the successful completion of the 'test' job

    steps:
      # Step to print "Hello World" to indicate the deploy stage
      - name: Print Hello World
        run: echo "Hello World - Deploy Stage"

    # Add notification step for failure
    if: failure()
    steps:
      - name: Send failure notification
        uses: actions/github-script@v6
        with:
          script: |
            const { GitHub, context } = require('@actions/github');
            const github = new GitHub(process.env.GITHUB_TOKEN);

            const { data: { login } } = await github.users.getAuthenticated();
            const failureMessage = `Deployment failed in repository ${context.repo.owner}/${context.repo.repo}. Triggered by ${login}.`;

            await github.issues.createComment({
              ...context.repo,
              issue_number: 1, // Replace with your issue number or use another notification method
              body: failureMessage
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
